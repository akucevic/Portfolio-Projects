import codecademylib3_seaborn
import matplotlib.pyplot as plt
from sklearn.svm import SVC
from sklearn.model_selection import train_test_split
from svm_visualization import draw_boundary
from players import aaron_judge, jose_altuve, david_ortiz

def plot_strike_zone(data, player_name, gamma=3, C=1):
  fig, ax = plt.subplots()
  print(data.columns)

  print(aaron_judge.description.unique())

  print(aaron_judge.type.unique())

  aaron_judge['type'] = aaron_judge['type'].map({'S': 1, 'B': 0})

  print(aaron_judge['type'])

  print(aaron_judge['plate_x'])
  print(aaron_judge['plate_z'])
  print(aaron_judge['strikes'])

  import numpy as np

  

  aaron_judge = aaron_judge.dropna(subset = ['plate_x','plate_z','strikes','type'])

  print(aaron_judge['type'].isna().sum())

  plt.scatter(x = aaron_judge['plate_x'], y = aaron_judge['plate_z'],c = aaron_judge['type'], cmap = plt.cm.coolwarm, alpha = 0.25)


  training_set, validation_set = train_test_split(aaron_judge, random_state = 1)

  from sklearn.svm import SVC
  classifier = SVC(kernel = 'rbf', gamma = 100, C = 100)

# Select features (X) and labels (y) from training_set
  X_train = training_set[['plate_x', 'plate_z','strikes']]
  y_train = training_set['type']

# Fit the SVC classifier
  classifier.fit(X_train, y_train)
 
  ax.set_ylim(-2, 6)

  draw_boundary(ax,classifier)

  classifier.score(X_train,y_train)

  print(classifier.score(validation_set[['plate_x', 'plate_z', 'strikes']],validation_set['type']))

  from sklearn.svm import SVC

  best_score = 0
  best_gamma = None
  best_C = None
# Loop through different gamma and C values to find the best configuration
  for gamma in [0.1, 0.5, 1, 3, 5, 10, 20, 50]:
      for C in [0.1, 0.5, 1, 3, 5, 10, 20, 50]:
        classifier = SVC(kernel='rbf', gamma=gamma, C=C)
        classifier.fit(training_set[['plate_x', 'plate_z', 'strikes']], training_set['type'])
        score = classifier.score(validation_set[['plate_x', 'plate_z', 'strikes']], validation_set['type'])

        print(f"gamma={gamma}, C={C}, accuracy={score:.4f}")

        if score > best_score:
            best_score = score
            best_gamma = gamma
            best_C = C

  print("\nBest configuration:")
  print(f"gamma={best_gamma}, C={best_C}, accuracy={best_score:.4f}")
  plot_strike_zone(aaron_judge, "Aaron Judge")


  plt.show()

  plt.show()
print (plot_strike_zone)
